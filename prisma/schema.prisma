generator client {
  provider = "prisma-client-js"
}

// local dev with mysql
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// vercel deploy with postgresql
// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

/// 以下為資料表定義
// https://www.prisma.io/docs/concepts/components/prisma-schema/data-model
// 部落格CRUD範例
model Blog {
  id        Int      @id @default(autoincrement())
  // DateTime 會轉換成資料庫的 timestamp，time zone 會自動轉換成 UTC
  // 格式: 2021-01-01T00:00:00.000Z
  createdAt DateTime @default(now()) @map("created_at")
  // 這個欄位會在每次更新時"自動"更新時間，不需要手動更新
  // DateTime 會轉換成資料庫的 timestamp，time zone 會自動轉換成 UTC
  updatedAt DateTime @updatedAt @map("updated_at")
  title     String   @db.VarChar(255)
  content   String?  @db.Text
  published Boolean  @default(false)

  // 關聯: User:Blog = 1:n 
  // author    User     @relation(fields: [authorId], references: [id])
  // authorId  Int
  @@map("blog")
}

model Brand {
  id   Int    @id @default(autoincrement())
  name String @unique

  // ❌ img 欄位資料庫沒有 → 註解掉
  // img String?

  // ❌ info 欄位資料庫沒有 → 註解掉
  // info String? @db.Text

  products Product[]
}

model ProductCategory {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  // parentId Int?      @map("parent_id")
  // 關聯: Category:Product = 1:n 
  products           Product[]
  ProductSubcategory ProductSubcategory[]

  @@map("product_categories")
}

model Favorite {
  // 關聯: User:Favorite = 1:n 
  member    member  @relation(fields: [memberId], references: [id])
  memberId  Int     @map("member_id")
  // 關聯: Product:Favorite = 1:n 
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  // 複合主鍵
  @@id([memberId, productId])
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String
  token     String
  hash      String?
  createdAt DateTime @default(now()) @map("created_at")
  expiredAt DateTime @map("expired_at")
}

model Profile {
  id       Int       @id @default(autoincrement())
  name     String?
  bio      String?   @db.Text
  avatar   String?
  sex      String?
  // 日期格式: 2021-01-01
  birth    DateTime? @db.Date
  phone    String?
  postcode String?
  address  String?
  // 1:1 關聯
  member   member    @relation(fields: [memberId], references: [id])
  memberId Int       @unique @map("member_id")
}

model Product {
  id             Int       @id @default(autoincrement())
  name           String
  description    String?   @db.Text // ✅ 對應資料庫
  price          Decimal?  @db.Decimal(10, 0)
  discount_price Decimal?  @db.Decimal(10, 0)
  category_id    Int?
  subcategory_id Int?      @map("subcategory_id")
  updated_at     DateTime?
  brand_id       Int?
  is_active      Boolean?
  start_at       DateTime?
  end_at         DateTime?
  created_at     DateTime?
  notice         String?   @db.Text
  valid          Boolean   @default(true)
  sn             String?   @unique

  brand           Brand?              @relation(fields: [brand_id], references: [id])
  productCategory ProductCategory?    @relation(fields: [category_id], references: [id])
  subcategory     ProductSubcategory? @relation(fields: [subcategory_id], references: [id])

  product_images            ProductImage[]
  product_specifications    ProductSpecification[]
  product_tag_map           ProductTagMap[]
  Favorite                  Favorite[]
  reviews                   ProductReview[]
  favorites                 ProductFavorite[]
  ProductVariantCombination ProductVariantCombination[]
}

model ProductSubcategory {
  id         Int              @id @default(autoincrement())
  name       String           @db.VarChar(255)
  categoryId Int?             @map("category_id")
  category   ProductCategory? @relation(fields: [categoryId], references: [id])

  products Product[]

  @@map("product_subcategories")
}

model ProductImage {
  id         Int     @id @default(autoincrement())
  image      String
  is_primary Boolean @default(false)
  product    Product @relation(fields: [productId], references: [id])
  productId  Int     @map("product_id")

  @@map("product_images")
}

model ProductSpecification {
  id         Int     @id @default(autoincrement())
  title      String
  value      String
  sort_order Int
  product    Product @relation(fields: [productId], references: [id])
  productId  Int     @map("product_id")

  @@map("product_specifications")
}

model ProductTag {
  id   Int             @id @default(autoincrement())
  name String
  maps ProductTagMap[]

  @@map("product_tags")
}

model ProductTagMap {
  id         Int        @id @default(autoincrement())
  product    Product    @relation(fields: [productId], references: [id])
  productId  Int        @map("product_id")
  productTag ProductTag @relation(fields: [tagId], references: [id])
  tagId      Int        @map("tag_id")

  @@map("product_tag_map")
}

model ProductReview {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int      @map("product_id")
  memberId   Int      @map("member_id")
  rating     Int
  comment    String?
  created_at DateTime @default(now()) @map("created_at")

  @@map("product_reviews")
}

model ProductFavorite {
  id         Int     @id @default(autoincrement())
  member_id  Int
  product_id Int
  product    Product @relation(fields: [product_id], references: [id])

  @@map("product_favorites")
}

model ProductVariantType {
  id      Int                    @id @default(autoincrement())
  name    String                 @db.VarChar(50)
  options ProductVariantOption[] // 一對多關聯

  @@map("product_variant_types")
}

model ProductVariantOption {
  id                 Int                               @id @default(autoincrement())
  name               String                            @db.VarChar(50)
  typeId             Int                               @map("type_id")
  type               ProductVariantType                @relation(fields: [typeId], references: [id])
  combinationOptions ProductVariantCombinationOption[]

  @@map("product_variant_options")
}

model ProductVariantCombination {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  sku       String?  @db.VarChar(50)
  price     Decimal? @db.Decimal(10, 0)
  stock     Int?

  product Product                           @relation(fields: [productId], references: [id])
  options ProductVariantCombinationOption[]

  @@map("product_variant_combinations")
}

model ProductVariantCombinationOption {
  combinationId Int @map("combination_id")
  optionId      Int @map("option_id")

  combination ProductVariantCombination @relation(fields: [combinationId], references: [id])
  option      ProductVariantOption      @relation(fields: [optionId], references: [id])

  @@id([combinationId, optionId])
  @@map("product_variant_combination_options")
}

model member {
  id              Int        @id @default(autoincrement())
  username        String     @unique
  password        String
  email           String     @unique
  // 關聯 User:Profile = 1:1 
  profile         Profile?
  emailValidated  Boolean    @default(false) @map("email_validated")
  googleUid       String?    @unique @map("google_uid")
  lineUid         String?    @unique @map("line_uid")
  lineAccessToken String?    @map("line_access_token") @db.Text
  // 關聯: User:Product = n:m 透過 Favorite
  favorites       Favorite[]
}
